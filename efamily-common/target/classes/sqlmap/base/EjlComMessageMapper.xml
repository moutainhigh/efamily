<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EjlMessage">
	<resultMap id="EjlMessageResult" type="com.winterframework.efamily.entity.EjlMessage">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="ejlMessageColumns">
	    <![CDATA[
	        	id as id,
	        	send_user_id as sendUserId,
	        	receive_user_id as receiveUserId,
	        	content as content,
	        	content_type as contentType,
	        	chat_type as chatType,
	        	chat_room_id as chatRoomId,
	        	content_time as contentTime,
	        	status as status,
	        	remark as remark,
	        	creator_id as creatorId,
	        	create_time as createTime,
	        	updator_id as updatorId,
	        	update_time as updateTime,
	        	app_send_time as appSendTime
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.efamily.entity.EjlMessage" 
			useGeneratedKeys="true" keyProperty="id" 
		 flushCache="true">
	    <![CDATA[
	        INSERT INTO
	        ejl_message (
	        	send_user_id ,
	        	receive_user_id ,
	        	content ,
	        	content_type ,
	        	chat_type ,
	        	chat_room_id ,
	        	content_time ,
	        	status ,
	        	remark ,
	        	creator_id ,
	        	create_time ,
	        	app_send_time  
	        ) VALUES (
	        	#{sendUserId,javaType=long,jdbcType=DECIMAL} ,
	        	#{receiveUserId,javaType=long,jdbcType=DECIMAL} ,
	        	#{content,javaType=string,jdbcType=VARCHAR} ,
	        	#{contentType,javaType=long,jdbcType=DECIMAL} ,
	        	#{chatType,javaType=long,jdbcType=DECIMAL} ,
	        	#{chatRoomId,javaType=long,jdbcType=DECIMAL} ,
	        	#{contentTime,javaType=long,jdbcType=DECIMAL} ,
	        	#{status,javaType=integer,jdbcType=INTEGER} ,
	        	#{remark,javaType=string,jdbcType=VARCHAR} ,
	        	#{creatorId,javaType=long,jdbcType=DECIMAL} ,
	        	#{createTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{appSendTime,javaType=long,jdbcType=DECIMAL} 
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.efamily.entity.EjlMessage">
	    <![CDATA[
	        UPDATE ejl_message SET
		        send_user_id = #{sendUserId,javaType=long,jdbcType=DECIMAL} ,
		        receive_user_id = #{receiveUserId,javaType=long,jdbcType=DECIMAL} ,
		        content = #{content,javaType=string,jdbcType=VARCHAR} ,
		        content_type = #{contentType,javaType=long,jdbcType=DECIMAL} ,
		        chat_type = #{chatType,javaType=long,jdbcType=DECIMAL} ,
		        chat_room_id = #{chatRoomId,javaType=long,jdbcType=DECIMAL} ,
		        content_time = #{contentTime,javaType=long,jdbcType=DECIMAL} ,
		        status = #{status,javaType=integer,jdbcType=INTEGER} ,
		        remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
		        updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL}  ,
		        update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from ejl_message where
		        id = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="EjlMessageResult" flushCache="false">
			select <include refid="ejlMessageColumns" />
		    <![CDATA[
			    from ejl_message 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="EjlMessageResult" flushCache="false">
			select <include refid="ejlMessageColumns" />
			    from ejl_message 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
                #{item}
                </foreach>					
		</select>	

	<sql id="ejlMessageDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(sendUserId)">
				and send_user_id = #{sendUserId}
			</if>
	       <if test="@Ognl@isNotEmpty(receiveUserId)">
				and receive_user_id = #{receiveUserId}
			</if>
	       <if test="@Ognl@isNotEmpty(content)">
				and content = #{content}
			</if>
	       <if test="@Ognl@isNotEmpty(contentType)">
				and content_type = #{contentType}
			</if>
	       <if test="@Ognl@isNotEmpty(chatType)">
				and chat_type = #{chatType}
			</if>
	       <if test="@Ognl@isNotEmpty(chatRoomId)">
				and chat_room_id = #{chatRoomId}
			</if>
	       <if test="@Ognl@isNotEmpty(contentTime)">
				and content_time = #{contentTime}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				and status = #{status,javaType=integer,jdbcType=INTEGER}
			</if>			
	       <if test="@Ognl@isNotEmpty(remark)">
				and remark = #{remark}
			</if>
	       <if test="@Ognl@isNotEmpty(creatorId)">
				and creator_id = #{creatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and create_time = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(updatorId)">
				and updator_id = #{updatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTime)">
				and update_time = #{updateTime}
			</if>
		   <if test="@Ognl@isNotEmpty(appSendTime)">
				and app_send_time = #{appSendTime}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="EjlMessageResult"  flushCache="false">
    	select <include refid="ejlMessageColumns" />
	    from ejl_message 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ejl_message 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ejl_message 
		<include refid="ejlMessageDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="EjlMessageResult">
    	select <include refid="ejlMessageColumns" />
	    from ejl_message 
		<include refid="ejlMessageDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	<select id="getObjByAttribute" resultMap="EjlMessageResult">
    	select <include refid="ejlMessageColumns" />
	    from ejl_message 
		<include refid="ejlMessageDynamicWhere"/>
    </select>


	
</mapper>
