<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EjlDevice">
	<resultMap id="EjlDeviceResult" type="com.winterframework.efamily.entity.EjlDevice">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="ejlDeviceColumns">
	    <![CDATA[
	        	id as id,
	        	name as name,
	        	type as type,
	        	status as status,
	        	code as code,
	        	user_id as userId,
	        	family_id as familyId,
	        	software_version as softwareVersion,
	        	remark as remark,
	        	creator_id as creatorId,
	        	create_time as createTime,
	        	updator_id as updatorId,
	        	update_time as updateTime,
	        	volume as volume,
	        	brightness as brightness,
	        	quiet_mode as quietMode,
	        	shake as shake,
	        	phone_number as phoneNumber,
	        	online_status as onlineStatus,
	        	sleeplock_status as sleeplockStatus,
	        	bind_on_off_time as bindOnOffTime,
	        	running_mode as runningMode,
	        	software_status as softwareStatus,
	        	software_updator_id as softwareUpdatorId,
	        	software_update_time as softwareUpdateTime,
	        	software_finish_time as softwareFinishTime,
	        	oper_type as operType,
	        	oper_status as operStatus,
	        	oper_user_id as operUserId,
	        	oper_time as operTime,
	        	oper_finish_time as operFinishTime,
	        	bind_user_id as bindUserId,
	        	bind_time as bindTime,
	        	bind_finish_time as bindFinishTime,
	        	qrcode_resource_id as qrcodeResourceId
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.efamily.entity.EjlDevice" 
			useGeneratedKeys="true" keyProperty="id" 
		 flushCache="true">
	    <![CDATA[
	        INSERT INTO
	        ejl_device (
	        	name ,
	        	type ,
	        	status ,
	        	code ,
	        	user_id ,
	        	family_id ,
	        	software_version,
	        	remark ,
	        	creator_id ,
	        	create_time ,
	        	volume ,
	        	brightness ,
	        	quiet_mode ,
	        	shake ,
	        	phone_number ,
	        	bind_on_off_time ,
	        	running_mode ,
	        	software_status,
	        	software_updator_id,
	        	software_update_time,
	        	software_finish_time,
	        	oper_type,
	        	oper_status,
	        	oper_user_id,
	        	oper_time,
	        	oper_finish_time,
	        	bind_user_id,
	        	bind_time,
	        	bind_finish_time,
	        	qrcode_resource_id
	        ) VALUES (
	        	#{name,javaType=string,jdbcType=VARCHAR} ,
	        	#{type,javaType=integer,jdbcType=INTEGER} ,
	        	#{status,javaType=long,jdbcType=DECIMAL} ,
	        	#{code,javaType=string,jdbcType=VARCHAR} ,
	        	#{userId,javaType=long,jdbcType=DECIMAL} ,
	        	#{familyId,javaType=long,jdbcType=DECIMAL} ,
	        	#{softwareVersion,javaType=string,jdbcType=VARCHAR} ,
	        	#{remark,javaType=string,jdbcType=VARCHAR} ,
	        	#{creatorId,javaType=long,jdbcType=DECIMAL} ,
	        	#{createTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{volume,javaType=integer,jdbcType=INTEGER} ,
	        	#{brightness,javaType=integer,jdbcType=INTEGER} ,
	        	#{quietMode,javaType=integer,jdbcType=INTEGER} ,
	        	#{shake,javaType=integer,jdbcType=INTEGER} ,
	        	#{phoneNumber,javaType=string,jdbcType=VARCHAR} ,
	        	#{bindOnOffTime,javaType=date,jdbcType=TIMESTAMP} , 
	        	#{runningMode,javaType=integer,jdbcType=INTEGER} ,
	        	#{softwareStatus,javaType=integer,jdbcType=INTEGER} ,
	        	#{softwareUpdatorId,javaType=long,jdbcType=DECIMAL} ,
	        	#{softwareUpdateTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{softwareFinishTime,javaType=date,jdbcType=TIMESTAMP} ,
				#{operType,javaType=integer,jdbcType=INTEGER} ,
	        	#{operStatus,javaType=integer,jdbcType=INTEGER} ,
	        	#{operUserId,javaType=long,jdbcType=DECIMAL} ,
	        	#{operTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{operFinishTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{bindUserId,javaType=long,jdbcType=DECIMAL} ,
	        	#{bindTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{bindFinishTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{qrcodeResourceId,javaType=string,jdbcType=VARCHAR} 
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.efamily.entity.EjlDevice">
	        UPDATE ejl_device 
	        <set>
			        <if test="@Ognl@isNotEmpty(name)">
					name = #{name,javaType=string,jdbcType=VARCHAR} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(type)">
					type = #{type,javaType=integer,jdbcType=INTEGER} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(status)">
					status = #{status,javaType=long,jdbcType=DECIMAL} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(code)">
					code = #{code,javaType=string,jdbcType=VARCHAR} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(userId)">
					user_id = #{userId,javaType=long,jdbcType=DECIMAL} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(familyId)">
					family_id = #{familyId,javaType=long,jdbcType=DECIMAL} ,
				    </if>
				    <if test="@Ognl@isNotEmpty(softwareVersion)">
					software_version = #{softwareVersion,javaType=string,jdbcType=VARCHAR} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(remark)">
					remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(updatorId)">
					updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(updateTime)">
					update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(volume)">
					volume = #{volume,javaType=integer,jdbcType=INTEGER} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(brightness)">
					brightness = #{brightness,javaType=integer,jdbcType=INTEGER} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(quietMode)">
					quiet_mode = #{quietMode,javaType=integer,jdbcType=INTEGER} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(shake)">
					shake = #{shake,javaType=integer,jdbcType=INTEGER} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(phoneNumber)">
					phone_number = #{phoneNumber,javaType=string,jdbcType=VARCHAR}, 
				    </if>
				    <if test="@Ognl@isNotEmpty(onlineStatus)">
					online_status = #{onlineStatus,javaType=integer,jdbcType=INTEGER} ,
				    </if>
				    <if test="@Ognl@isNotEmpty(sleeplockStatus)">
					sleeplock_status = #{sleeplockStatus,javaType=integer,jdbcType=INTEGER}, 
				    </if>
				    <if test="@Ognl@isNotEmpty(bindOnOffTime)">
					bind_on_off_time = #{bindOnOffTime,javaType=date,jdbcType=TIMESTAMP} ,
				    </if>
			        <if test="@Ognl@isNotEmpty(runningMode)">
					running_mode = #{runningMode,javaType=integer,jdbcType=INTEGER} ,
				    </if>
				    software_status=#{softwareStatus,javaType=integer,jdbcType=INTEGER} ,
				    software_updator_id = #{softwareUpdatorId,javaType=long,jdbcType=DECIMAL} ,
				    software_update_time = #{softwareUpdateTime,javaType=date,jdbcType=TIMESTAMP} ,
				    software_finish_time = #{softwareFinishTime,javaType=date,jdbcType=TIMESTAMP} ,
					oper_type=#{operType,javaType=integer,jdbcType=INTEGER} ,
				    oper_status=#{operStatus,javaType=integer,jdbcType=INTEGER} ,
				    oper_user_id = #{operUserId,javaType=long,jdbcType=DECIMAL} ,
				    oper_time = #{operTime,javaType=date,jdbcType=TIMESTAMP} ,
				    oper_finish_time = #{operFinishTime,javaType=date,jdbcType=TIMESTAMP} ,
				    bind_user_id = #{bindUserId,javaType=long,jdbcType=DECIMAL} ,
				    bind_time = #{bindTime,javaType=date,jdbcType=TIMESTAMP} ,
				    bind_finish_time = #{bindFinishTime,javaType=date,jdbcType=TIMESTAMP} ,
			        <if test="@Ognl@isNotEmpty(qrcodeResourceId)">
					qrcode_resource_id = #{qrcodeResourceId,javaType=string,jdbcType=VARCHAR} 
				    </if>
				    
			</set>	    
	        WHERE 
		        id = #{id} 
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from ejl_device where
		        id = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="EjlDeviceResult" flushCache="false">
			select <include refid="ejlDeviceColumns" />
		    <![CDATA[
			    from ejl_device 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="EjlDeviceResult" flushCache="false">
			select <include refid="ejlDeviceColumns" />
			    from ejl_device 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
                #{item}
				</foreach>					
		</select>	

	<sql id="ejlDeviceDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(name)">
				and name = #{name}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				and type = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				and status = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(code)">
				and code = #{code}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				and user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(familyId)">
				and family_id = #{familyId}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				and remark = #{remark}
			</if>
	       <if test="@Ognl@isNotEmpty(creatorId)">
				and creator_id = #{creatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and create_time = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(updatorId)">
				and updator_id = #{updatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTime)">
				and update_time = #{updateTime}
			</if>
	       <if test="@Ognl@isNotEmpty(volume)">
				and volume = #{volume}
			</if>
	       <if test="@Ognl@isNotEmpty(brightness)">
				and brightness = #{brightness}
			</if>
	       <if test="@Ognl@isNotEmpty(quietMode)">
				and quiet_mode = #{quietMode}
			</if>
	       <if test="@Ognl@isNotEmpty(shake)">
				and shake = #{shake}
			</if>
	       <if test="@Ognl@isNotEmpty(phoneNumber)">
				and phone_number = #{phoneNumber}
			</if>
	       <if test="@Ognl@isNotEmpty(bindOnOffTime)">
				and bind_on_off_time = #{bindOnOffTime}
			</if>			
	       <if test="@Ognl@isNotEmpty(runningMode)">
				and running_mode = #{runningMode}
			</if>			
	       <if test="@Ognl@isNotEmpty(qrcodeResourceId)">
				and qrcode_resource_id = #{qrcodeResourceId}
			</if>			
		</where>
	</sql>
	
	<select id="getAll" resultMap="EjlDeviceResult"  flushCache="false">
    	select <include refid="ejlDeviceColumns" />
	    from ejl_device 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ejl_device 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ejl_device 
		<include refid="ejlDeviceDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="EjlDeviceResult">
    	select <include refid="ejlDeviceColumns" />
	    from ejl_device 
		<include refid="ejlDeviceDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	<select id="getObjByAttribute" resultMap="EjlDeviceResult">
    	select <include refid="ejlDeviceColumns" />
	    from ejl_device 
		<include refid="ejlDeviceDynamicWhere"/>
    </select>
	<select id="getByImei" parameterType="string" resultMap="EjlDeviceResult" flushCache="false">
	   select <include refid="ejlDeviceColumns" />
		 FROM EJL_DEVICE 
		WHERE code = #{imei}
	</select>
	<select id="getByType" resultMap="EjlDeviceResult">
	   select <include refid="ejlDeviceColumns" />
		 FROM EJL_DEVICE 
		WHERE type = #{type}
	</select>
	
	<select id="getDeviceByTypeAndStatus" resultMap="EjlDeviceResult">
	   select <include refid="ejlDeviceColumns" />
		 FROM EJL_DEVICE 
		WHERE type = #{type} and status = #{status}
	</select>
</mapper>