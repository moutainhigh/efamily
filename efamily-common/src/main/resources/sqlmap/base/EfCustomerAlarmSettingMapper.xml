<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EfCustomerAlarmSetting">
	<resultMap id="EfCustomerAlarmSettingResult" type="com.winterframework.efamily.entity.EfCustomerAlarmSetting">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="EfCustomerAlarmSettingColumns">
       	id as id,
       	customer_id as customerId,
       	alarm_type as alarmType,
       	alarm_url as alarmUrl,
       	status as status,
       	remark as remark,
       	creator_id as creatorId,
       	create_time as createTime,
       	updator_id as updatorId,
       	update_time as updateTime,
       	method as method
	</sql>
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" parameterType="com.winterframework.efamily.entity.EfCustomerAlarmSetting" 
		useGeneratedKeys="true" keyProperty="id" 
	 flushCache="true">
        INSERT INTO
        ef_customer_alarm_setting (
        	customer_id,
        	alarm_type ,
        	alarm_url,
        	status,
        	remark ,
        	creator_id ,
        	create_time  ,
        	method
        ) VALUES (
			#{customerId,javaType=long,jdbcType=DECIMAL} ,
        	#{alarmType,javaType=integer,jdbcType=INTEGER} ,
        	#{alarmUrl,javaType=string,jdbcType=VARCHAR} ,
        	#{status,javaType=integer,jdbcType=INTEGER} ,
        	#{remark,javaType=string,jdbcType=VARCHAR} ,
        	#{creatorId,javaType=long,jdbcType=DECIMAL}  ,
        	#{createTime,javaType=date,jdbcType=TIMESTAMP}  ,
        	#{method,javaType=string,jdbcType=VARCHAR}
        )
	</insert>
    
	<update id="update" parameterType="com.winterframework.efamily.entity.EfCustomerAlarmSetting">
        UPDATE ef_customer_alarm_setting SET
	        customer_id = #{customerId,javaType=long,jdbcType=DECIMAL} ,
	        alarm_type = #{alarmType,javaType=long,jdbcType=DECIMAL} ,
	        alarm_url = #{alarmUrl,javaType=string,jdbcType=VARCHAR} ,
	        status = #{status,javaType=integer,jdbcType=INTEGER} ,
	        remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
	        updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL} ,
	        update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP} ,
	        method = #{method,javaType=string,jdbcType=VARCHAR}
        WHERE 
	        id = #{id} 
	</update>
   <delete id="delete" parameterType="java.lang.Long">
        delete from ef_customer_alarm_setting where
	        id = #{id} 
    </delete>   
    <select id="getById" parameterType="long" resultMap="EfCustomerAlarmSettingResult" flushCache="false">
		select <include refid="EfCustomerAlarmSettingColumns" />
		    from ef_customer_alarm_setting 
	        where 
	        id = #{id} 
	</select>	
	<select id="getByIds" parameterType="list"  resultMap="EfCustomerAlarmSettingResult" flushCache="false">
		select <include refid="EfCustomerAlarmSettingColumns" />
		    from ef_customer_alarm_setting 
	        where id in
			<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
               #{item}
               </foreach>					
	</select>	
 
	<select id="getAll" resultMap="EfCustomerAlarmSettingResult"  flushCache="false">
    	select <include refid="EfCustomerAlarmSettingColumns" />
	    from ef_customer_alarm_setting 
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
    
    <select id="getByCustomerIdAndAlarmType" resultMap="EfCustomerAlarmSettingResult">
    	select <include refid="EfCustomerAlarmSettingColumns" />
	    from ef_customer_alarm_setting 
		where customer_id=#{customerId}
		  and alarm_type=#{alarmType}
    </select>
</mapper>
