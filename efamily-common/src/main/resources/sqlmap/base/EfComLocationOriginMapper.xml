<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EfLocationOrigin">
	<resultMap id="EfLocationOriginResult" type="com.winterframework.efamily.entity.EfLocationOrigin">
	</resultMap>
	<resultMap id="deviceMap" type="hashmap" >
	  <result property="userId" column="user_id" javaType="long" jdbcType="DECIMAL"/>
	  <result property="deviceId" column="device_id" javaType="long" jdbcType="DECIMAL"/>
	</resultMap>
	<!-- 用于select查询公用抽取的列 -->
	<sql id="EfLocationOriginColumns">
	        	id as id,
	        	user_id as userId,
	        	longitude as longitude,
	        	latitude as latitude,
	        	device_id as deviceId,
	        	type as type,
	        	time as time,
	        	source as source,
	        	source_id as sourceId,
	        	city as city,
	        	address as address,
	        	remark as remark,
	        	creator_id as creatorId,
	        	create_time as createTime,
	        	updator_id as updatorId,
	        	STATUS as status,
	        	flag as flag,
	        	update_time as updateTime,
	        	radius as radius
	        	
	        	
	        	
	
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.efamily.entity.EfLocationOrigin" 
			useGeneratedKeys="true" keyProperty="id" 
		 flushCache="true">
	    <![CDATA[
	        INSERT INTO
	        ef_location_origin (
	        	user_id ,
	        	longitude ,
	        	latitude ,
	        	device_id ,
	        	type ,
	        	time ,
	        	source ,
	        	source_id ,
	        	city,
	        	address,
	        	remark ,
	        	creator_id ,
	        	create_time ,
	        	status,
	        	flag,
	        	radius
	        ) VALUES (
	        	#{userId,javaType=long,jdbcType=DECIMAL} ,
	        	#{longitude,javaType=double,jdbcType=DECIMAL} ,
	        	#{latitude,javaType=double,jdbcType=DECIMAL} ,
	        	#{deviceId,javaType=long,jdbcType=DECIMAL} ,
	        	#{type,javaType=integer,jdbcType=INTEGER} ,
	        	#{time,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{source,javaType=integer,jdbcType=INTEGER} ,
	        	#{sourceId,javaType=long,jdbcType=DECIMAL} ,
	        	#{city,javaType=string,jdbcType=VARCHAR} ,
				#{address,javaType=string,jdbcType=VARCHAR} ,
	        	#{remark,javaType=string,jdbcType=VARCHAR} ,
	        	#{creatorId,javaType=long,jdbcType=DECIMAL} ,
	        	#{createTime,javaType=date,jdbcType=TIMESTAMP},  
	        	#{status,javaType=integer,jdbcType=INTEGER},
	        	#{flag,javaType=integer,jdbcType=INTEGER},
	        	#{radius,javaType=long,jdbcType=DECIMAL}
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.efamily.entity.EfLocationOrigin">
	    <![CDATA[
	        UPDATE ef_location_origin SET
		        user_id = #{userId,javaType=long,jdbcType=DECIMAL} ,
		        longitude=#{longitude,javaType=double,jdbcType=DECIMAL} ,
		        latitude=#{latitude,javaType=double,jdbcType=DECIMAL} ,
		        device_id = #{deviceId,javaType=long,jdbcType=DECIMAL} ,
		        type = #{type,javaType=integer,jdbcType=INTEGER} ,
		        time = #{time,javaType=date,jdbcType=TIMESTAMP} ,
		        source = #{source,javaType=integer,jdbcType=INTEGER} ,
		        source_id = #{sourceId,javaType=long,jdbcType=DECIMAL} ,
		        city = #{city,javaType=string,jdbcType=VARCHAR} ,
		        address = #{address,javaType=string,jdbcType=VARCHAR} ,
		        remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
		        updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL}  ,
		        update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP},
		        status =  #{status,javaType=integer,jdbcType=INTEGER},
		        flag =  #{flag,javaType=integer,jdbcType=INTEGER},
		        radius = #{radius,javaType=long,jdbcType=DECIMAL} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from ef_location_origin where
		        id = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="EfLocationOriginResult" flushCache="false">
			select <include refid="EfLocationOriginColumns" />
		    <![CDATA[
			    from ef_location_origin 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="EfLocationOriginResult" flushCache="false">
			select <include refid="EfLocationOriginColumns" />
			    from ef_location_origin 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
                #{item}
                </foreach>					
		</select>	

	<sql id="EfLocationOriginDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				and user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(longitude)">
				and longitude = #{longitude}
			</if>
			<if test="@Ognl@isNotEmpty(latitude)">
				and latitude = #{latitude}
			</if>
	       <if test="@Ognl@isNotEmpty(deviceId)">
				and device_id = #{deviceId}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				and type = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(time)">
				and time = #{time}
			</if>
	       <if test="@Ognl@isNotEmpty(source)">
				and source = #{source}
			</if>
			<if test="@Ognl@isNotEmpty(city)">
				and city = #{city}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				and remark = #{remark}
			</if>
	       <if test="@Ognl@isNotEmpty(creatorId)">
				and creator_id = #{creatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and create_time = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(updatorId)">
				and updator_id = #{updatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTime)">
				and update_time = #{updateTime}
			</if>
			<if test="@Ognl@isNotEmpty(status)">
				and status = #{status}
			</if>
			<if test="@Ognl@isNotEmpty(flag)">
				and flag = #{flag}
			</if>
			<if test="@Ognl@isNotEmpty(radius)">
				and radius = #{radius}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="EfLocationOriginResult"  flushCache="false">
    	select <include refid="EfLocationOriginColumns" />
	    from ef_location_origin 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ef_location_origin 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ef_location_origin 
		<include refid="EfLocationOriginDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="EfLocationOriginResult">
    	select <include refid="EfLocationOriginColumns" />
	    from ef_location_origin 
		<include refid="EfLocationOriginDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	<select id="getObjByAttribute" resultMap="EfLocationOriginResult">
    	select <include refid="EfLocationOriginColumns" />
	    from ef_location_origin 
		<include refid="EfLocationOriginDynamicWhere"/>
    </select>
    <update id="updateStatus" parameterType="hashmap" >
	    <![CDATA[
	        UPDATE ef_location_origin SET
		        flag =  #{status}
	        WHERE 
		        id = #{id} 
	    ]]>
	</update>
	
	
	
	
	<select id="getLocationOriginByDevice" resultMap="EfLocationOriginResult" flushCache="false">
			select * from (select <include refid="EfLocationOriginColumns" />
			    from ef_location_origin 
		        where user_id=#{userId}
		        and device_id=#{deviceId}
                and flag=0 and status=1
                order by device_id,time) a	limit 100		
	</select>
	
	
	<select id="getLocationOriginDeviceId" resultMap="deviceMap">
		select distinct user_id,device_id
		    from ef_location_origin 
	       where flag=0 and status=1
	       <if test="@Ognl@isNotEmpty(beginTime)">
	       and time BETWEEN #{beginTime} and #{endTime} 
	       </if>
	</select>
	
	<select id="getLocationOriginByTime" parameterType="map" resultMap="EfLocationOriginResult" flushCache="false">
			select <include refid="EfLocationOriginColumns" />
			    from ef_location_origin 
		        where  status=1 and device_id=#{deviceId} and time>=#{beginTime} and time <![CDATA[<=]]> #{endTime} 
                order by device_id,time
	</select>
	
	
	<select id="getLocationOriginByDeviceAndTime" resultMap="EfLocationOriginResult" flushCache="false">
		select <include refid="EfLocationOriginColumns" />
			    from ef_location_origin 
		        where user_id=#{userId}
		        and device_id=#{deviceId}
                and flag=0 and status=1
                and time BETWEEN #{beginTime} and #{endTime}
                order by time
	</select>
	
	
</mapper>
