<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EjlUserBarrier">
	<resultMap id="EjlUserBarrierResult" type="com.winterframework.efamily.entity.EjlUserBarrier">
	</resultMap>
	<resultMap id="EjlUserBarrierStruc" type="com.winterframework.efamily.entity.UserBarrierStruc">
	</resultMap>
	<resultMap id="UserDeviceBarrierStrucResult" type="com.winterframework.efamily.entity.UserDeviceBarrierStruc">
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="ejlUserBarrierColumns">
	    <![CDATA[
	        	id as id,
	        	user_id as userId,
	        	status as status,
	        	location as location,
	        	radius as radius,
	        	creator_id as creatorId,
	        	create_time as createTime,
	        	updator_id as updatorId,
	        	update_time as updateTime,
	        	type as type,
	        	remark as remark,
	        	orgTag as orgTag
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.efamily.entity.EjlUserBarrier" 
			useGeneratedKeys="true" keyProperty="id" 
		 flushCache="true">
	    <![CDATA[
	        INSERT INTO
	        ejl_user_barrier (
	        	user_id ,
	        	status ,
	        	location ,
	        	radius ,
	        	creator_id ,
	        	create_time ,
	        	type ,
	        	remark,
	        	orgTag
	        ) VALUES (
	        	#{userId,javaType=long,jdbcType=DECIMAL} ,
	        	#{status,javaType=integer,jdbcType=INTEGER} ,
	        	#{location,javaType=string,jdbcType=VARCHAR} ,
	        	#{radius,javaType=long,jdbcType=DECIMAL} ,
	        	#{creatorId,javaType=long,jdbcType=DECIMAL}  ,
	        	#{createTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{type,javaType=integer,jdbcType=INTEGER} ,
	        	#{remark,javaType=string,jdbcType=VARCHAR} ,
	        	#{orgTag,javaType=integer,jdbcType=INTEGER}
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.efamily.entity.EjlUserBarrier">

	        UPDATE ejl_user_barrier
		        <set>
		           <if test="@Ognl@isNotEmpty(userId)">
				     user_id = #{userId,javaType=long,jdbcType=DECIMAL} ,
			       </if>
			       <if test="@Ognl@isNotEmpty(status)">
						status = #{status,javaType=integer,jdbcType=INTEGER} ,
					</if>
			       <if test="@Ognl@isNotEmpty(location)">
						location = #{location,javaType=string,jdbcType=VARCHAR} ,
					</if>
			       <if test="@Ognl@isNotEmpty(radius)">
						radius = #{radius,javaType=long,jdbcType=DECIMAL} ,
					</if>
			       <if test="@Ognl@isNotEmpty(updatorId)">
						updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL}  ,
					</if>
			       <if test="@Ognl@isNotEmpty(updateTime)">
						update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP} ,
					</if>
			       <if test="@Ognl@isNotEmpty(type)">
						type = #{type,javaType=integer,jdbcType=INTEGER} ,
					</if>
			       <if test="@Ognl@isNotEmpty(remark)">
						remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
					</if>
					<if test="@Ognl@isNotEmpty(orgTag)">
						orgTag = #{orgTag,javaType=integer,jdbcType=INTEGER} ,
					</if>
		    </set>
	        WHERE 
		        id = #{id} 
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from ejl_user_barrier where
		        id = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="EjlUserBarrierResult" flushCache="false">
			select <include refid="ejlUserBarrierColumns" />
		    <![CDATA[
			    from ejl_user_barrier 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="EjlUserBarrierResult" flushCache="false">
			select <include refid="ejlUserBarrierColumns" />
			    from ejl_user_barrier 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
                #{item}
                </foreach>					
		</select>	

	<sql id="ejlUserBarrierDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				and user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(status)">
				and status = #{status}
			</if>
	       <if test="@Ognl@isNotEmpty(location)">
				and location = #{location}
			</if>
	       <if test="@Ognl@isNotEmpty(radius)">
				and radius = #{radius}
			</if>
	       <if test="@Ognl@isNotEmpty(creatorId)">
				and creator_id = #{creatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and create_time = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(updatorId)">
				and updator_id = #{updatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTime)">
				and update_time = #{updateTime}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				and type = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				and remark = #{remark}
			</if>
			<if test="@Ognl@isNotEmpty(orgTag)">
				and orgTag = #{orgTag}
			</if>
			
		</where>
	</sql>
	
	<select id="getAll" resultMap="EjlUserBarrierResult"  flushCache="false">
    	select <include refid="ejlUserBarrierColumns" />
	    from ejl_user_barrier 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ejl_user_barrier 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ejl_user_barrier 
		<include refid="ejlUserBarrierDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="EjlUserBarrierResult">
    	select <include refid="ejlUserBarrierColumns" />
	    from ejl_user_barrier 
		<include refid="ejlUserBarrierDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	<select id="getObjByAttribute" resultMap="EjlUserBarrierResult">
    	select <include refid="ejlUserBarrierColumns" />
	    from ejl_user_barrier 
		<include refid="ejlUserBarrierDynamicWhere"/>
    </select>
	<select id="getOneBarrierByUserId" resultMap="EjlUserBarrierResult">
    	select <include refid="ejlUserBarrierColumns" />
	    from ejl_user_barrier 
		where
		user_id=#{userId} and orgTag=#{orgTag}
		and status in (0,1)
		order by id desc 
		limit 1
    </select>
    <select id="getListBarrierByUserId" resultMap="EjlUserBarrierStruc">
    	select 
  		id as fenceId,
       	status as status,
       	location as location,
       	radius as radius,
       	type as type,
       	remark as remark
	    from ejl_user_barrier 
		where
		user_id=#{userId} and orgTag=#{orgTag}
		and status in (0,1)
		order by id desc 
    </select>
    	    
	<select id="getUserBarrierList" resultMap="UserDeviceBarrierStrucResult" flushCache="false">
				select 
				eub.id as userBarrierId,
				eud.user_id as userId,
				eud.device_id as deviceId,
        	    eub.status as status,
        	    eub.location as location,
        	    eub.radius as radius,
        	    eub.remark as barrierRemark ,
        	    eub.orgTag as orgTag
		        from ejl_user_device as eud,ejl_user_barrier as eub 
	            where 
	            eud.status=1 and eud.user_id=eub.user_id and eub.status=1 
	            <if test="@Ognl@isNotEmpty(orgTag)">
					and eub.orgTag=#{orgTag}
				</if>
	            and eub.id>#{userBarrierId}
	            order by eub.id asc
	            limit 500
	</select>
	
	
	<delete id="deleteByUserAndOrgTag">
	    <![CDATA[
	        delete from ejl_user_barrier where
		        user_id = #{userId} and orgTag = #{orgTag}
	    ]]>
	</delete>
	<delete id="deleteByFenceId" parameterType="long"  >
	        update ejl_user_barrier set status=0,update_time=now()
	        where
	        id in (select barrier_id from ejl_user_fence where fence_id=#{fenceId})
	</delete>
			
</mapper>
