<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EfLocationSemi">
	<resultMap id="EfLocationSemiResult" type="com.winterframework.efamily.entity.EfLocationSemi">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="EfLocationSemiColumns">
	    
	        	id as id,
	        	user_id as userId,
	        	longitude as longitude,
	        	latitude as latitude,
	        	device_id as deviceId,
	        	type as type,
	        	time as time,
	        	source as source,
	        	source_id as sourceId,
	        	remark as remark,
	        	STATUS as status,
	        	FLAG as flag,
	        	time_begin as timeBegin,
		       	time_end as timeEnd,
		       	previous_id as previousId,
		       	next_id as nextId,
		       	distance as distance,
				city as city,
		       	address as address,
		       	creator_id as creatorId,
	        	create_time as createTime,
	        	updator_id as updatorId,
	        	update_time as updateTime ,
	        	radius as radius       	
	
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.efamily.entity.EfLocationSemi" 
			useGeneratedKeys="true" keyProperty="id" 
		 flushCache="true">
	    <![CDATA[
	        INSERT INTO
	        ef_location_semi (
	        	user_id ,
	        	longitude ,
	        	latitude ,
	        	device_id ,
	        	type ,
	        	time ,
	        	source ,
	        	source_id ,
	        	remark ,
	        	status,
	        	flag ,
	        	time_begin,
		       	time_end,
		       	previous_id,
		       	next_id,
		       	distance,
		       	city,
		       	address,
	        	creator_id ,
	        	create_time ,
	        	radius
	        ) VALUES (
	        	#{userId,javaType=long,jdbcType=DECIMAL} ,
	        	#{longitude,javaType=double,jdbcType=DECIMAL} ,
	        	#{latitude,javaType=double,jdbcType=DECIMAL} ,
	        	#{deviceId,javaType=long,jdbcType=DECIMAL} ,
	        	#{type,javaType=integer,jdbcType=INTEGER} ,
	        	#{time,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{source,javaType=integer,jdbcType=INTEGER} ,
	        	#{sourceId,javaType=long,jdbcType=DECIMAL} ,
	        	#{remark,javaType=string,jdbcType=VARCHAR} ,
	        	#{status,javaType=integer,jdbcType=INTEGER},
	        	#{flag,javaType=integer,jdbcType=INTEGER} ,
	        	#{timeBegin,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{timeEnd,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{previousId,javaType=long,jdbcType=DECIMAL},
	        	#{nextId,javaType=long,jdbcType=DECIMAL}, 
	        	#{distance,javaType=double,jdbcType=DECIMAL} ,
				#{city,javaType=string,jdbcType=VARCHAR} ,
	        	#{address,javaType=string,jdbcType=VARCHAR} , 
	        	#{creatorId,javaType=long,jdbcType=DECIMAL} ,
	        	#{createTime,javaType=date,jdbcType=TIMESTAMP},
	        	#{radius,javaType=long,jdbcType=DECIMAL}
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.efamily.entity.EfLocationSemi">
	    <![CDATA[
	        UPDATE ef_location_semi SET
		        user_id = #{userId,javaType=long,jdbcType=DECIMAL} ,
		        longitude=#{longitude,javaType=double,jdbcType=DECIMAL} ,
		        latitude=#{latitude,javaType=double,jdbcType=DECIMAL} ,
		        device_id = #{deviceId,javaType=long,jdbcType=DECIMAL} ,
		        type = #{type,javaType=integer,jdbcType=INTEGER} ,
		        time = #{time,javaType=date,jdbcType=TIMESTAMP} ,
		        source = #{source,javaType=integer,jdbcType=INTEGER} ,
		        source_id = #{sourceId,javaType=long,jdbcType=DECIMAL} ,
		        remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
		        status =  #{status,javaType=integer,jdbcType=INTEGER},
		        flag =  #{flag,javaType=integer,jdbcType=INTEGER} ,
		        time_begin = #{timeBegin,javaType=date,jdbcType=TIMESTAMP} ,
		        time_end = #{timeEnd,javaType=date,jdbcType=TIMESTAMP} ,
		        previous_id = #{previousId,javaType=long,jdbcType=DECIMAL} ,
		        next_id = #{nextId,javaType=long,jdbcType=DECIMAL},
		        distance=#{distance,javaType=double,jdbcType=DECIMAL} ,
				city = #{city,javaType=string,jdbcType=VARCHAR} ,
		        address = #{address,javaType=string,jdbcType=VARCHAR} ,
		        updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL}  ,
		        update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP},
		        radius = #{radius,javaType=long,jdbcType=DECIMAL} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from ef_location_semi where
		        id = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="EfLocationSemiResult" flushCache="false">
			select <include refid="EfLocationSemiColumns" />
		    <![CDATA[
			    from ef_location_semi 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="EfLocationSemiResult" flushCache="false">
			select <include refid="EfLocationSemiColumns" />
			    from ef_location_semi 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
                #{item}
                </foreach>					
		</select>	

	<sql id="EfLocationSemiDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				and user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(longitude)">
				and longitude = #{longitude}
			</if>
			<if test="@Ognl@isNotEmpty(latitude)">
				and latitude = #{latitude}
			</if>
	       <if test="@Ognl@isNotEmpty(deviceId)">
				and device_id = #{deviceId}
			</if>
	       <if test="@Ognl@isNotEmpty(type)">
				and type = #{type}
			</if>
	       <if test="@Ognl@isNotEmpty(time)">
				and time = #{time}
			</if>
	       <if test="@Ognl@isNotEmpty(source)">
				and source = #{source}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				and remark = #{remark}
			</if>
			<if test="@Ognl@isNotEmpty(city)">
				and city = #{city}
			</if>
	       <if test="@Ognl@isNotEmpty(creatorId)">
				and creator_id = #{creatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and create_time = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(updatorId)">
				and updator_id = #{updatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTime)">
				and update_time = #{updateTime}
			</if>
			<if test="@Ognl@isNotEmpty(status)">
				and status = #{status}
			</if>
			<if test="@Ognl@isNotEmpty(flag)">
				and flag = #{flag}
			</if>
			<if test="@Ognl@isNotEmpty(radius)">
				and radius = #{radius}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="EfLocationSemiResult"  flushCache="false">
    	select <include refid="EfLocationSemiColumns" />
	    from ef_location_semi 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ef_location_semi 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ef_location_semi 
		<include refid="EfLocationSemiDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="EfLocationSemiResult">
    	select <include refid="EfLocationSemiColumns" />
	    from ef_location_semi 
		<include refid="EfLocationSemiDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	<select id="getObjByAttribute" resultMap="EfLocationSemiResult">
    	select <include refid="EfLocationSemiColumns" />
	    from ef_location_semi 
		<include refid="EfLocationSemiDynamicWhere"/>
    </select>
    <select id="getPrevious" resultMap="EfLocationSemiResult">
    	select <include refid="EfLocationSemiColumns" />
		FROM
			(
				SELECT
					*
				FROM
					ef_location_semi a
				WHERE
					a.user_id=#{userId}
				AND a.device_id=#{deviceId}
				AND a.time>DATE_ADD(NOW(),INTERVAL -1 day)
				AND	a.status=1
				<if test="@Ognl@isNotEmpty(flags)">
						AND flag in
							<foreach item="item" index="index" collection="flags" open="(" separator="," close=")">
			                #{item}
			                </foreach>
					</if>
				AND	EXISTS (
						SELECT
							1
						FROM
							ef_location_semi b
						WHERE
							b.id = #{id}
						AND a.user_id = b.user_id
						AND a.device_id = b.device_id
						AND a.time <![CDATA[<]]> b.time
					)
				ORDER BY
					time DESC
			) k
		LIMIT 1
    </select>
    <select id="getNext" resultMap="EfLocationSemiResult">
    	select <include refid="EfLocationSemiColumns" />
		FROM
			(
				SELECT
					*
				FROM
					ef_location_semi a
				WHERE
					a.user_id=#{userId}
				AND a.device_id=#{deviceId}
				AND a.time>DATE_ADD(NOW(),INTERVAL -1 day)
				AND	a.status=1
				<if test="@Ognl@isNotEmpty(flags)">
						AND flag in
							<foreach item="item" index="index" collection="flags" open="(" separator="," close=")">
			                #{item}
			                </foreach>
					</if>
				AND	EXISTS (
						SELECT
							1
						FROM
							ef_location_semi b
						WHERE
							b.id = #{id}
						AND a.user_id = b.user_id
						AND a.device_id = b.device_id
						AND a.time <![CDATA[>]]> b.time
					)
				ORDER BY
					time ASC
			) k
		LIMIT 1
    </select>
    
    <select id="getDeviceLocationSemiByStatus" resultMap="EfLocationSemiResult" parameterType="hashmap" >
    	select * from (select <include refid="EfLocationSemiColumns" />
	    from ef_location_semi 
		<include refid="EfLocationSemiDynamicWhere"/>
			ORDER BY device_id,time
			) a
		<if test="@Ognl@isNotEmpty(count)">
		 limit count
		</if>
    </select>
    
    <update id="updateStatus" parameterType="hashmap" >
	    <![CDATA[
	        UPDATE ef_location_semi SET
		        status =  #{status}
	        WHERE 
		        id = #{id} 
	    ]]>
	</update>
	
	<select id="getLast" resultMap="EfLocationSemiResult" parameterType="hashmap" >
    	select * from (select <include refid="EfLocationSemiColumns" />
	    from ef_location_semi 
		where device_id=#{deviceId}  and time  <![CDATA[<]]> #{time}  and status =1 and flag<![CDATA[>=]]>#{flag}
		and flag<![CDATA[!=]]>#{notFlag} and flag<![CDATA[!=]]>#{notFlag1} 
			ORDER BY time desc
			) a
		 limit 1
    </select>
    
    <select id="getLastLocation" resultMap="EfLocationSemiResult" parameterType="hashmap" >
    	select * from 
    	    (
		    	select <include refid="EfLocationSemiColumns" />
			    from ef_location_semi 
				where device_id=#{deviceId} and user_id=#{userId} and status=1 and flag not in(4,33) 
				ORDER BY time desc 
			) a
		 limit 1
    </select>
    
    <select id="getNewestLocationForQueryNotice" resultMap="EfLocationSemiResult" parameterType="hashmap" >
    	select * from 
    	    (
		    	select <include refid="EfLocationSemiColumns" />
			    from ef_location_semi  
				where user_id=#{userId} and device_id=#{deviceId} and  time_end>#{time} and status=1 and flag not in(4,33) 
				ORDER BY time desc 
			) a
		 limit 1
    </select>
    
    <select id="getFirstLocationByNewUnhanderTime" resultMap="EfLocationSemiResult" parameterType="hashmap" >
    	select <include refid="EfLocationSemiColumns" />
	    from ef_location_semi 
		where device_id=#{deviceId} and time  <![CDATA[<]]> #{endTime} and time>=#{beginTime} and status =1 and flag<![CDATA[>=]]>#{flag}
		and flag<![CDATA[!=]]>#{notFlag} and flag<![CDATA[!=]]>#{notFlag1} 
			ORDER BY time asc
    </select>
    
    
    <select id="getAllListByNewUnhander" resultMap="EfLocationSemiResult" parameterType="hashmap" >
	select <include refid="EfLocationSemiColumns" />
	    from ef_location_semi
		where device_id=#{deviceId} and time  <![CDATA[>=]]> (select time from ef_location_semi where device_id=#{deviceId} and flag=#{flag} and status=1 order by time asc limit 1)  and status =1 
		and flag<![CDATA[!=]]>#{notFlag} and flag<![CDATA[!=]]>#{notFlag1} 
			ORDER BY time desc
			
    </select>
    
    
    <select id="getPreviousByTime" resultMap="EfLocationSemiResult">
    	select <include refid="EfLocationSemiColumns" />
		FROM
			(
				SELECT
					*
				FROM
					ef_location_semi a
				WHERE
					a.user_id=#{userId}
				AND a.device_id=#{deviceId}
				AND a.time>DATE_ADD(NOW(),INTERVAL -1 day)
				AND	a.status=1
				<if test="@Ognl@isNotEmpty(flags)">
						AND flag in
							<foreach item="item" index="index" collection="flags" open="(" separator="," close=")">
			                #{item}
			                </foreach>
					</if>
				AND a.time <![CDATA[<]]> #{time}
				ORDER BY
					time DESC
			) k
		LIMIT 1
    </select>
    <select id="getNextByTime" resultMap="EfLocationSemiResult">
    	select <include refid="EfLocationSemiColumns" />
		FROM
			(
				SELECT
					*
				FROM
					ef_location_semi a
				WHERE
					a.user_id=#{userId}
				AND a.device_id=#{deviceId}
				AND a.time>DATE_ADD(NOW(),INTERVAL -1 day)
				AND	a.status=1
				<if test="@Ognl@isNotEmpty(flags)">
						AND flag in
							<foreach item="item" index="index" collection="flags" open="(" separator="," close=")">
			                #{item}
			                </foreach>
					</if>
				AND a.time <![CDATA[>]]> #{time}
				ORDER BY
					time ASC
			) k
		LIMIT 1
    </select>
    
    
    
	
</mapper>
