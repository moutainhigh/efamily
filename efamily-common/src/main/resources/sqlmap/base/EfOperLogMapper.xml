<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EfOperLog">
	<resultMap id="OperLogResult" type="com.winterframework.efamily.entity.EfOperLog">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="OperLogColumns">
	    <![CDATA[
	        	id as id,
	        	user_id as userId,
	        	device_id as deviceId,
	        	command as command,
	        	operation as operation,
	        	time as time,
	        	remark as remark,
	        	creator_id as creatorId,
	        	updator_id as updatorId,
	        	update_time as updateTime
	    ]]>
	</sql>
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" parameterType="com.winterframework.efamily.entity.EfOperLog" 
		useGeneratedKeys="true" keyProperty="id" 
	 flushCache="true">
        INSERT INTO
        ef_oper_log (
        	id ,
        	user_id ,
        	device_id ,
        	command,
        	operation ,
        	time,
        	remark ,
        	creator_id , 
        	create_time
        ) VALUES (
        	#{id,javaType=integer,jdbcType=INTEGER} ,
        	#{userId,javaType=long,jdbcType=DECIMAL} ,
        	#{deviceId,javaType=long,jdbcType=DECIMAL} ,
        	#{command,javaType=string,jdbcType=VARCHAR} ,
        	#{operation,javaType=string,jdbcType=VARCHAR} ,
        	#{time,javaType=date,jdbcType=TIMESTAMP} ,
        	#{remark,javaType=string,jdbcType=VARCHAR} ,
        	#{creatorId,javaType=long,jdbcType=DECIMAL} , 
        	#{createTime,javaType=date,jdbcType=TIMESTAMP}
        )
	</insert>
    
	<update id="update" parameterType="com.winterframework.efamily.entity.EfOperLog">
        UPDATE ef_oper_log SET
	        user_id = #{userId,javaType=long,jdbcType=DECIMAL} ,
	        device_id = #{deviceId,javaType=long,jdbcType=DECIMAL} ,
	        command = #{command,javaType=string,jdbcType=VARCHAR} ,
	        operation = #{operation,javaType=string,jdbcType=VARCHAR} ,
	        time = #{time,javaType=date,jdbcType=TIMESTAMP}  ,
	        remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
	        updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL}  ,
	        update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP} 
        WHERE 
	        id = #{id}
	</update>
   <delete id="delete" parameterType="java.lang.String">
        delete from ef_oper_log where id = #{id} 
    </delete>   
    <select id="getById" parameterType="java.lang.String" resultMap="OperLogResult" flushCache="false">
		select <include refid="OperLogColumns" />
	      from ef_oper_log 
         where 
            id = #{id}
	</select>
	
	<select id="getAll" resultMap="OperLogResult"  flushCache="false">
    	select <include refid="OperLogColumns" />
	    from ef_oper_log 
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ef_oper_log 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ef_oper_log   
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="OperLogResult">
    	select <include refid="OperLogColumns" />
	    from ef_oper_log 
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
</mapper>
