<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<mapper namespace="com.winterframework.efamily.entity.EfLocationMovemode">
	<resultMap id="EfLocationMovemodeResult" type="com.winterframework.efamily.entity.EfLocationMovemode">
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="efLocationMovemodeColumns">
	    <![CDATA[
	        	id as id,
	        	user_id as userId,
	        	device_id as deviceId,
	        	move_mode as moveMode,
	        	avg_speed as avgSpeed,
	        	min_speed as minSpeed,
	        	max_speed as maxSpeed,
	        	from_time as fromTime,
	        	to_time as toTime,
	        	cur_location as curLocation,
	        	remark as remark,
	        	creator_id as creatorId,
	        	create_time as createTime,
	        	updator_id as updatorId,
	        	update_time as updateTime
	    ]]>
	</sql>
		<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
		<insert id="insert" parameterType="com.winterframework.efamily.entity.EfLocationMovemode" 
			useGeneratedKeys="true" keyProperty="id" 
		 flushCache="true">
	    <![CDATA[
	        INSERT INTO
	        ef_location_movemode (
	        	id ,
	        	user_id ,
	        	device_id ,
	        	move_mode ,
	        	avg_speed ,
	        	min_speed ,
	        	max_speed ,
	        	from_time ,
	        	to_time ,
	        	cur_location,
	        	remark ,
	        	creator_id ,
	        	create_time ,
	        	updator_id ,
	        	update_time 
	        ) VALUES (
	        	#{id,javaType=long,jdbcType=INTEGER} ,
	        	#{userId,javaType=long,jdbcType=DECIMAL} ,
	        	#{deviceId,javaType=long,jdbcType=DECIMAL} ,
	        	#{moveMode,javaType=integer,jdbcType=INTEGER} ,
	        	#{avgSpeed,javaType=double,jdbcType=DECIMAL} ,
	        	#{minSpeed,javaType=double,jdbcType=DECIMAL} ,
	        	#{maxSpeed,javaType=double,jdbcType=DECIMAL} ,
	        	#{fromTime,javaType=long,jdbcType=DECIMAL} ,
	        	#{toTime,javaType=long,jdbcType=DECIMAL} ,
				#{curLocation,javaType=string,jdbcType=VARCHAR} ,
	        	#{remark,javaType=string,jdbcType=VARCHAR} ,
	        	#{creatorId,javaType=long,jdbcType=DECIMAL} ,
	        	#{createTime,javaType=date,jdbcType=TIMESTAMP} ,
	        	#{updatorId,javaType=long,jdbcType=DECIMAL} ,
	        	#{updateTime,javaType=date,jdbcType=TIMESTAMP} 
	        )
	    ]]>	
	
		</insert>
	    
		<update id="update" parameterType="com.winterframework.efamily.entity.EfLocationMovemode">
	    <![CDATA[
	        UPDATE ef_location_movemode SET
		        user_id = #{userId,javaType=long,jdbcType=DECIMAL} ,
		        device_id = #{deviceId,javaType=long,jdbcType=DECIMAL} ,
		        move_mode = #{moveMode,javaType=integer,jdbcType=INTEGER} ,
		        avg_speed = #{avgSpeed,javaType=double,jdbcType=DECIMAL} ,
		        min_speed = #{minSpeed,javaType=double,jdbcType=DECIMAL} ,
		        max_speed = #{maxSpeed,javaType=double,jdbcType=DECIMAL} ,
		        from_time = #{fromTime,javaType=long,jdbcType=DECIMAL} ,
		        to_time = #{toTime,javaType=long,jdbcType=DECIMAL} ,
				cur_location = #{curLocation,javaType=string,jdbcType=VARCHAR} ,
		        remark = #{remark,javaType=string,jdbcType=VARCHAR} ,
		        creator_id = #{creatorId,javaType=long,jdbcType=DECIMAL} ,
		        create_time = #{createTime,javaType=date,jdbcType=TIMESTAMP} ,
		        updator_id = #{updatorId,javaType=long,jdbcType=DECIMAL} ,
		        update_time = #{updateTime,javaType=date,jdbcType=TIMESTAMP} 
	        WHERE 
		        id = #{id} 
	    ]]>
		</update>
	   <delete id="delete" parameterType="java.lang.Long">
	    <![CDATA[
	        delete from ef_location_movemode where
		        id = #{id} 
	    ]]>
	    </delete>   
	    <select id="getById" parameterType="long" resultMap="EfLocationMovemodeResult" flushCache="false">
			select <include refid="efLocationMovemodeColumns" />
		    <![CDATA[
			    from ef_location_movemode 
		        where 
		        id = #{id} 
		    ]]>
		</select>	
		<select id="getByIds" parameterType="list"  resultMap="EfLocationMovemodeResult" flushCache="false">
			select <include refid="efLocationMovemodeColumns" />
			    from ef_location_movemode 
		        where id in
				<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
#{item}				</foreach>					
		</select>	

	<sql id="efLocationMovemodeDynamicWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
	       <if test="@Ognl@isNotEmpty(id)">
				and id = #{id}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				and user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(deviceId)">
				and device_id = #{deviceId}
			</if>
	       <if test="@Ognl@isNotEmpty(moveMode)">
				and move_mode = #{moveMode}
			</if>
	       <if test="@Ognl@isNotEmpty(avgSpeed)">
				and avg_speed = #{avgSpeed}
			</if>
	       <if test="@Ognl@isNotEmpty(minSpeed)">
				and min_speed = #{minSpeed}
			</if>
	       <if test="@Ognl@isNotEmpty(maxSpeed)">
				and max_speed = #{maxSpeed}
			</if>
	       <if test="@Ognl@isNotEmpty(fromTime)">
				and from_time = #{fromTime}
			</if>
	       <if test="@Ognl@isNotEmpty(toTime)">
				and to_time = #{toTime}
			</if>
	       <if test="@Ognl@isNotEmpty(remark)">
				and remark = #{remark}
			</if>
	       <if test="@Ognl@isNotEmpty(creatorId)">
				and creator_id = #{creatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(createTime)">
				and create_time = #{createTime}
			</if>
	       <if test="@Ognl@isNotEmpty(updatorId)">
				and updator_id = #{updatorId}
			</if>
	       <if test="@Ognl@isNotEmpty(updateTime)">
				and update_time = #{updateTime}
			</if>
		</where>
	</sql>
	
	<select id="getAll" resultMap="EfLocationMovemodeResult"  flushCache="false">
    	select <include refid="efLocationMovemodeColumns" />
	    from ef_location_movemode 

		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>	
	<select id="getCount" resultType="long">
        select count(*) from ef_location_movemode 
    </select>
    <select id="getCountByPage" resultType="long">
        select count(*) from ef_location_movemode 
		<include refid="efLocationMovemodeDynamicWhere"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="getByPage" resultMap="EfLocationMovemodeResult">
    	select <include refid="efLocationMovemodeColumns" />
	    from ef_location_movemode 
		<include refid="efLocationMovemodeDynamicWhere"/>
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
	<select id="getObjByAttribute" resultMap="EfLocationMovemodeResult">
    	select <include refid="efLocationMovemodeColumns" />
	    from ef_location_movemode 
		<include refid="efLocationMovemodeDynamicWhere"/>
    </select>

	<select id="getLastEfLocationMovemode" resultMap="EfLocationMovemodeResult">
		select <include refid="efLocationMovemodeColumns" />
	    from ef_location_movemode where user_id=#{userId}
	    and device_id = #{deviceId} order by from_time desc limit 1
	</select>
	
	<select id="getStilDeviceList" resultMap="EfLocationMovemodeResult">
		select e1.id as id,
	        	e1.user_id as userId,
	        	e1.device_id as deviceId,
	        	e1.move_mode as moveMode,
	        	e1.avg_speed as avgSpeed,
	        	e1.min_speed as minSpeed,
	        	e1.max_speed as maxSpeed,
	        	e1.from_time as fromTime,
	        	e1.to_time as toTime,
	        	e1.remark as remark,
	        	e1.creator_id as creatorId,
	        	e1.create_time as createTime,
	        	e1.updator_id as updatorId,
	        	e1.update_time as updateTime from ef_location_movemode e1
		WHERE EXISTS(
			SELECT 1 from (
				select user_id,device_id,max(from_time) beginTime from ef_location_movemode
				group by user_id,device_id
			) e2
			WHERE e1.device_id=e2.device_id and e1.user_id=e2.user_id
			and e1.from_time = e2.beginTime
		)
		and e1.to_time is null and e1.move_mode=-1
	</select>
	
	<select id="getLastEfLocationMovemodeList" resultMap="EfLocationMovemodeResult">
		select <include refid="efLocationMovemodeColumns" />
	    from ef_location_movemode where user_id=#{userId}
	    and device_id = #{deviceId} order by to_time desc limit 0,#{count}
	</select>
	
	<select id="getMoveDeviceList" resultMap="EfLocationMovemodeResult">
		select e1.id as id,
	        	e1.user_id as userId,
	        	e1.device_id as deviceId,
	        	e1.move_mode as moveMode,
	        	e1.avg_speed as avgSpeed,
	        	e1.min_speed as minSpeed,
	        	e1.max_speed as maxSpeed,
	        	e1.from_time as fromTime,
	        	e1.to_time as toTime,
	        	e1.cur_location as curLocation,
	        	e1.remark as remark,
	        	e1.creator_id as creatorId,
	        	e1.create_time as createTime,
	        	e1.updator_id as updatorId,
	        	e1.update_time as updateTime from ef_location_movemode e1
		WHERE EXISTS(
			SELECT 1 from (
				select user_id,device_id,max(from_time) beginTime from ef_location_movemode
				group by user_id,device_id
			) e2
			WHERE e1.device_id=e2.device_id and e1.user_id=e2.user_id
			and e1.from_time = e2.beginTime
		)
		and e1.to_time is not null
	</select>
	
</mapper>
