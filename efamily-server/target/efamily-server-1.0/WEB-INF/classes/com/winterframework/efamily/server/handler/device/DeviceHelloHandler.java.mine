package com.winterframework.efamily.server.handler.device;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.winterframework.efamily.base.model.Context;
import com.winterframework.efamily.base.model.Response;
import com.winterframework.efamily.base.redis.RedisClient;
import com.winterframework.efamily.base.utils.DateUtils;
import com.winterframework.efamily.base.utils.JsonUtils;
import com.winterframework.efamily.dto.device.DeviceHelloRequest;
import com.winterframework.efamily.dto.device.DeviceHelloResponse;
import com.winterframework.efamily.server.core.AbstractHandler;
import com.winterframework.efamily.server.core.TokenManager;
import com.winterframework.efamily.server.exception.ServerException;
import com.winterframework.efamily.server.protocol.FmlRequest;
import com.winterframework.efamily.server.protocol.FmlResponse;
import com.winterframework.modules.spring.exetend.PropertyConfig;

/**
 * 设备向服务器打招呼处理类
 * 
 * @ClassName
 * @Description
 * @author ibm 2015年3月17日
 */
@Service("deviceHelloHandler")
public class DeviceHelloHandler extends AbstractHandler {
	@PropertyConfig("server.url.device")
	private String serverUrl;
	@PropertyConfig("device.hello")
	private String urlPath;
	@Resource(name = "RedisClient")
	private RedisClient redisClient;

	@Override
	protected FmlResponse doHandle(Context ctx, FmlRequest req) throws ServerException{ 
		DeviceHelloRequest bizReq=(DeviceHelloRequest)JsonUtils.fromJson(req.getValue("data"), DeviceHelloRequest.class);
		FmlResponse res=new FmlResponse(req);
		//APP绑定手表往redis写入key=imei,value=appId(已有则绑定请求扔入推送队列fromId-toId）
		Response<DeviceHelloResponse> bizRes=http(serverUrl,urlPath,ctx,bizReq,DeviceHelloResponse.class);	 
		res=getFmlResponse(res,bizRes);
		if(null!=bizRes && null!=bizRes.getData()){
			Map<String,String> resData=new HashMap<String,String>();
			resData.put("userId",bizRes.getData().getUserId()+"");
			resData.put("deviceId",bizRes.getData().getDeviceId()+"");
			resData.put("fromId",bizRes.getData().getFromId()+"");
			resData.put("nickName",bizRes.getData().getNickName());
			resData.put("phoneNumber",bizRes.getData().getPhoneNumber());
			resData.put("familyName",bizRes.getData().getFamilyName());
			resData.put("chatRoomId",bizRes.getData().getChatRoomId()+"");
			res.setData(resData);
			
			ctx.set("userId",bizRes.getData().getUserId());
			ctx.set("deviceId",bizRes.getData().getDeviceId());
			ctx.set("nickName",bizRes.getData().getDeviceNickName());
			ctx.set("phoneNumber",bizRes.getData().getDevicePhoneNumber());
			ctx.set("familyName",bizRes.getData().getFamilyName());
			res.setToken(getToken(ctx));
			/*Map<String,String> resData=new HashMap<String,String>();
			resData.put("userId","999");
			resData.put("deviceId","888");
			resData.put("fromId","675");
			resData.put("nickName","nickName");
			resData.put("phoneNumber","1555555555");
			resData.put("familyName","familyNmae");
			resData.put("chatRoomId","603");
			res.setData(resData);
			
			ctx.set("userId",999L);
			ctx.set("deviceId",888L);
			res.setToken(getToken(ctx));*/
		}
		return res;
	}
	private String getToken(Context ctx) {
		return TokenManager.save(ctx);
	}

}