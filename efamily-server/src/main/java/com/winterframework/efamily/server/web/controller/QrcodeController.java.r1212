package com.winterframework.efamily.server.web.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.winterframework.efamily.base.enums.ResourceType;
import com.winterframework.efamily.base.enums.StatusCode;
import com.winterframework.efamily.base.model.Context;
import com.winterframework.efamily.base.model.Response;
import com.winterframework.efamily.base.utils.FileAccess;
import com.winterframework.efamily.base.utils.FileUtil;
import com.winterframework.efamily.base.utils.JsonUtils;
import com.winterframework.efamily.base.utils.QrcodeUtil;
import com.winterframework.efamily.base.utils.ResourceUtils;
import com.winterframework.efamily.dto.device.DeviceHardwareRequest;
import com.winterframework.efamily.dto.device.DeviceHardwareResponse;
import com.winterframework.efamily.dto.device.ResourceUploadRequest;
import com.winterframework.efamily.dto.device.ResourceUploadResponse;
import com.winterframework.efamily.dto.device.UpdateQrcodeResourceIdRequest;
import com.winterframework.efamily.dto.device.UpdateQrcodeResourceIdResponse;
import com.winterframework.efamily.server.exception.ServerException;
import com.winterframework.efamily.server.utils.HttpUtil;
import com.winterframework.modules.spring.exetend.PropertyConfig;
 
/** 根据内容下载二维码
 *QrcodeController
 * @ClassName
 * @Description
 * @author ibm
 * 2015年12月21日
 */
@Controller("qrcodeController")
@RequestMapping("/device")
public class QrcodeController {
	private static final Logger log = LoggerFactory.getLogger(QrcodeController.class);
	@PropertyConfig("server.url.app")
	private String serverUrl;
	@PropertyConfig("resource.upload")
	private String urlPath_upload;
	@PropertyConfig("resource.download")
	private String urlPath_download;
	@PropertyConfig(value = "filePath")
	private String filePath;
	@Resource(name="fileUtil")
	private FileUtil fileUtil;
	@Resource(name="httpUtil")
	protected HttpUtil httpUtil;
	@PropertyConfig("server.url.device")
	private String deviceServerUrl;
	@PropertyConfig("device.hardware")
	private String updateUrlPath;
	@PropertyConfig("device.qrcode")
	private String updateQrcode;
	@PropertyConfig(value = "portal.url")
	private String qrcodeContentPrefix;
	
	public final String RESOURCE_TYPE_IMAGE=ResourceType.IMAGE;
	public final String RESOURCE_EXTENT_TYPE_JPG=ResourceType.ImageType.JPG;
	
	
	
	/** 
	 * @Description 根据imei内容下载二维码
	 * @author ibm
	 * 2015年12月21日
	 * @throws ServerException 
	 */
	@RequestMapping("/hardware")
	@ResponseBody
	public Object download(HttpServletRequest request,HttpServletResponse response) throws ServerException {
		//新建Context,用于插入数据库
		Context ctx = new Context();
		ctx.set("userId", -1);
		//得到请求的数据
		DeviceHardwareRequest deviceHardwareRequest = new DeviceHardwareRequest();
		String type = request.getParameter("type");
		String imei = request.getParameter("imei");
		String imsi = request.getParameter("imsi");
		String model = request.getParameter("model");
		String simStatus = request.getParameter("simStatus");
		deviceHardwareRequest.setType(Integer.valueOf(type));
		deviceHardwareRequest.setImei(imei);
		deviceHardwareRequest.setImsi(imsi);
		deviceHardwareRequest.setModel(model);
		deviceHardwareRequest.setSimStatus(Integer.valueOf(simStatus));
		
		Map<String,String> map=new HashMap<String,String>();
		map.put("status", StatusCode.OK.getValue()+"");
		//将设备数据入库
		Response<DeviceHardwareResponse> bizRes = null;
		try {
			bizRes = httpUtil.http(deviceServerUrl,updateUrlPath,ctx,deviceHardwareRequest,DeviceHardwareResponse.class);
		} catch (ServerException e1) {
			log.error("error when save qrcode",e1);
			throw new ServerException(StatusCode.SAVE_FAILED.getValue());
		}	
		if(null==bizRes || null==bizRes.getData()){
			map.put("status", StatusCode.SAVE_FAILED.getValue()+"");
			return map;
		}
		String resourceType = RESOURCE_TYPE_IMAGE;
		String filePath=getFilePath(resourceType); 
		//将内容生成二维码，返回二维码的绝对路径
		filePath = QrcodeUtil.generate(filePath, RESOURCE_EXTENT_TYPE_JPG, bizRes.getData().getQrcodeUrl()+"?imei="+imei);
		
		//*** 把图片压缩成大中小
		//*****************  复制文件[high] *******************************************************
		FileAccess.copy(filePath, filePath+ResourceType.DefinitionType.HIGH);
		
		//*****************  压缩文件[low  middle] ************************************************
		FileAccess.scaleImage(filePath+ResourceType.DefinitionType.HIGH,RESOURCE_EXTENT_TYPE_JPG);

		//将二维码图片信息插入到资源数据库中
		ResourceUploadRequest bizReq=new ResourceUploadRequest();
		String resourceId=ResourceUtils.getMediaId(resourceType);
		bizReq.setResourceId(resourceId);
		bizReq.setType(resourceType);
		bizReq.setExtType(RESOURCE_EXTENT_TYPE_JPG);
		bizReq.setFilePath(filePath);
		bizReq.setIsMulti(0);
		bizReq.setRemark(imei);
		Response<ResourceUploadResponse> resourceBizRes = null;
		try {
			resourceBizRes = httpUtil.http(serverUrl,urlPath_upload,ctx,bizReq,ResourceUploadResponse.class);
		} catch (ServerException e1) {
			log.error("error when down qrcode",e1);
			map.put("status", StatusCode.SAVE_FAILED.getValue()+"");
		}
		if(null == resourceBizRes){	
			map.put("status", StatusCode.SAVE_FAILED.getValue()+"");
			return map;
		}
		//*********** 更新qr_code中对应的resource_id   ***************
		UpdateQrcodeResourceIdRequest bizQrcodeReq=new UpdateQrcodeResourceIdRequest();
		bizQrcodeReq.setResourceId(resourceId);
		bizQrcodeReq.setImei(imei);
		Response<UpdateQrcodeResourceIdResponse> bizQrcodeReqBizRes = null;
		try {
			bizQrcodeReqBizRes = httpUtil.http(deviceServerUrl,updateQrcode,ctx,bizQrcodeReq,UpdateQrcodeResourceIdResponse.class);
		} catch (ServerException e1) {
			log.error("error when down qrcode",e1);
			map.put("status", StatusCode.SAVE_FAILED.getValue()+"");
		}
		if(bizQrcodeReqBizRes==null){
			map.put("status", StatusCode.SAVE_FAILED.getValue()+"");
			return map;
		}
		
		//将文件的二进制流返回
		String filename = resourceId+"."+RESOURCE_EXTENT_TYPE_JPG;
		InputStream is =null; 
		OutputStream os =null;
		byte[] buffer =null;
		try{ 
			os = new BufferedOutputStream(response.getOutputStream());
	        response.addHeader("Content-Disposition", "attachment;filename="+filename);
	        response.setContentType("application/"+ RESOURCE_TYPE_IMAGE); 
	        File file = new File(filePath);
	        is = new BufferedInputStream(new FileInputStream(file));
	        buffer = new byte[is.available()];
	        is.read(buffer); 
	        os.write(buffer);
	        os.flush(); 
		}catch(IOException e){
			log.error("error when down qrcode", e);
			map.put("status", StatusCode.UNKNOW.getValue()+"");
		}finally{
			if(is!=null){
				try {
					is.close();
				} catch(IOException e) {
					log.error("error when down qrcode", e);
					map.put("status", StatusCode.UNKNOW.getValue()+"");
				}
			}
		}
		return  JsonUtils.toJson(map);
	}
	
	
	private String getFilePath(String type){  
		final String FILE_SUBFIXX = "";
		String fileName=System.currentTimeMillis()+"";
		return filePath + File.separator+type + File.separator + "qrcode" + File.separator  + fileName + FILE_SUBFIXX;
	}
}
