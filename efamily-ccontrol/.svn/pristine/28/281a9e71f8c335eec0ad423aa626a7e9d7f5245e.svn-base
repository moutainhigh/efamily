package com.winterframework.efamily.server.notification;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.winterframework.efamily.base.enums.Separator;
import com.winterframework.efamily.base.enums.StatusCode;
import com.winterframework.efamily.base.enums.YesNo;
import com.winterframework.efamily.base.exception.BizException;
import com.winterframework.efamily.base.model.Context;
import com.winterframework.efamily.base.model.NotyMessage;
import com.winterframework.efamily.base.model.NotyQueue;
import com.winterframework.efamily.base.model.NotyRule;
import com.winterframework.efamily.base.model.NotyTarget;
import com.winterframework.efamily.base.model.NotyTask;
import com.winterframework.efamily.base.model.Response;
import com.winterframework.efamily.base.redis.RedisClient;
import com.winterframework.efamily.base.redis.RedisQueue;
import com.winterframework.efamily.base.utils.DateUtils;
import com.winterframework.efamily.base.utils.JsonUtils;
import com.winterframework.efamily.base.utils.PropertyUtil;
import com.winterframework.efamily.ccontrol.utils.ServerUrlUtil;
import com.winterframework.efamily.dto.device.NotyTaskRequest;
import com.winterframework.efamily.dto.notification.NotificationInner;
import com.winterframework.efamily.dto.server.UserTarget;
import com.winterframework.efamily.entity.NotificationTask;
import com.winterframework.efamily.entity.converter.DTOConvert;
import com.winterframework.efamily.server.notification.exception.NotificationException;
import com.winterframework.efamily.server.notification.utils.NotyQueuePrefix;
import com.winterframework.efamily.service.INotificationTaskService;
import com.winterframework.efamily.utils.HttpUtil;
import com.winterframework.modules.utils.SpringContextHolder;

public class NotificationProcessorNew2 implements Runnable{ 
	private static final Logger log= LoggerFactory.getLogger(NotificationProcessorNew2.class);
	private final RedisQueue redisQueue=SpringContextHolder.getBean("redisQueue");
	private final RedisClient redisClient=SpringContextHolder.getBean("RedisClient");
	private final HttpUtil httpUtil=SpringContextHolder.getBean("httpUtil");
	private final ServerUrlUtil serverUrlUtil=SpringContextHolder.getBean("serverUrlUtil");
	private final INotificationTaskService notificationTaskService=SpringContextHolder.getBean("notificationTaskServiceImpl");
	
	private final PropertyUtil propertyUtil=SpringContextHolder.getBean("propertyUtil");
	 
	private String queueName; 
	public NotificationProcessorNew2(String queueName){
		this.queueName=queueName;
	} 
	public void run() {
		//log.debug("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+Thread.currentThread().getName());
	    process(); 
	}
	
	private void process(){
		//synchronized(queueName){	//防止并发 必须要加锁 
			//System.out.println(Thread.currentThread().getName()+"LLLLLLLLLLLLLLLLLIIIIIIIIIIIIIIIIIIIIIIIIII:"+queueName);
			try{
				int length=redisQueue.len(queueName);
				if(length>0){
					NotyTask notyTask=null;
					int index=0;
					NotyTarget target=getTarget(queueName);
					Long userId=target.getUserId();
					Long deviceId=target.getDeviceId();
					boolean hasOffline=false;
					//转发Server
					String serverUrl=serverUrlUtil.getConnectServer(userId, deviceId);
					String urlPath=propertyUtil.getProperty("server.connect.channel.connect");
					UserTarget userTarget=new UserTarget(userId, deviceId);
					Response<String> bizRes=httpUtil.http(serverUrl, urlPath, userTarget,UserTarget.class);
					boolean isDisconnected=false;//bizRes.getStatus().getCode()==StatusCode.OFF_LINE.getValue(); 
					if(isDisconnected){
						//不在线 则取上次的索引（只处理本次未处理的（可能走第三方推送））
						String notyIndexStr=redisClient.get(NotyQueuePrefix.NOTY_INDEX+queueName);
						if(null!=notyIndexStr){
							index=Integer.valueOf(notyIndexStr);
						}
					}
					for(;index<length;index++){
						bizRes=httpUtil.http(serverUrl, urlPath, userTarget,UserTarget.class);
						boolean isConnected=false;//bizRes.getStatus().getCode()==StatusCode.ON_LINE.getValue(); 
						if(isConnected){  //如果在线  则从队首开始处理  不在线也要继续处理 看是否走第三方离线推送
							index=0;
						}
						String dataStr=redisQueue.get(queueName, index);	
						if(null==dataStr) continue;
						notyTask=JsonUtils.fromJson(dataStr, NotyTask.class);
						//System.out.println(Thread.currentThread().getName()+"QQQQQQQQQQQQQQQQQQQQQQQQQQQ:"+queueName+ "  index="+index+" dataStr="+dataStr);
						boolean isFinished=doProcess(notyTask,isConnected);
						if(isFinished){
							redisQueue.del(queueName, dataStr);
							index--;
							length--;
						}else{
							redisQueue.set(queueName, index, JsonUtils.toJson(notyTask));
							hasOffline=true;
						}
					}
					if(hasOffline){
						redisQueue.add(NotyQueue.QUEUE_USER_OFFLINE, queueName);
					}
					redisClient.set(NotyQueuePrefix.NOTY_INDEX+queueName, index+""); 	//记录用户队列下次处理的index
					//System.out.println(Thread.currentThread().getName()+"LLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO:"+queueName);
				}
			}catch(Exception e){
				log.error("process notification error. queueName="+queueName);
			}finally{
				redisClient.unlock(NotyQueuePrefix.NOTY_LOCK+queueName);
			}
		//}
	}
	
	/**
	 * @param notyTask
	 * @param isOfflineQueue
	 * @return 是否用户已经断线（断线则下次再处理）
	 */
	private boolean doProcess(NotyTask notyTask,boolean isConnected) {
		//?????优化：查询队列 ->判断用户是否在线->是否推送消息、删除队列
		/*RedisQueue redisQueue=SpringContextHolder.getBean("redisQueue");
		IPushService pushService=SpringContextHolder.getBean("pushServiceImpl");*/ 
		
		
		boolean isOffline=false;
		NotyTarget target=notyTask.getTarget();
		NotyRule rule=notyTask.getRule();
		Map<String,String> data=notyTask.getData();
		Long taskTime=notyTask.getTaskTime();
		
		int command=notyTask.getCommand();
		Long userId=target.getUserId();
		Long deviceId=target.getDeviceId(); 
		int expireTime=rule.getExpireTime();
		
		boolean isHsn=rule.isHsn();
		
		String serverUrl=serverUrlUtil.getConnectServer(userId, deviceId);
		//转发Server
		//log.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX->userId:"+userId+"  deviceId:"+deviceId);
		if(notyTask.isOffline()){
			data.put("isOffline", YesNo.YES.getValue()+"");
		}
		//log.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX->isConnected:"+isConnected);
		if(rule.isOffline() && ((DateUtils.getCurTime()-taskTime)/1000/60>expireTime)){
			return true;
		}
		//未连接 & 离线推送 & 未失效    则放入优先级5队列中以待重发
		if(!isConnected && rule.isOffline() && (expireTime==-1 || ((DateUtils.getCurTime()-taskTime)/1000/60<=expireTime))){
			isOffline=true;
			//手表终端 需要连线后继续推送
			//log.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX->userId:"+userId+"  deviceId:"+deviceId);
			//log.debug("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX->userId:"+userId+"  deviceId:"+deviceId);
			if(null!=deviceId){
				//log.info("this is add queue->deviceId:"+deviceId);
				//addQueueHead(notyTask);//加入离线推送队列
				return false;
			}else{
				final NotyMessage.Type notyType=notyTask.getNotyType();  
				//if (isOfflineSend(notyTask.getSendType())){
					//手机终端离线推送
					if(!notyTask.isSentOffline()){
						
						//可改进：独立服务器处理第三方推送
						try{
							/*NotificationJpush notificationJpush=new NotificationJpush(userId,deviceId);
							notificationJpush.setAlertMsg(notyTask.getTitle());
							notificationJpush.setData(notyTask.getExtraData());
							
							try{
								String urlPath=propertyUtil.getProperty("server.connect.jpush");
								Response<NotificationInner> bizRes=httpUtil.http(serverUrl,urlPath,notificationJpush,NotificationJpush.class);
								if(null!=bizRes && bizRes.getStatus().getCode()!=StatusCode.OK.getValue()){
									throw new NotificationException(bizRes.getStatus().getCode());
								}
							}catch(BizException e){
								log.error("",e);
								throw new NotificationException(e.getCode());
							}*/
						}catch(Exception e){
							//log.error("JPush failed:"+notyTask.getExtraData().toString(),e);
						} 
						notyTask.setSentOffline(true);
					}
					/*new Thread(){
						public void run() {								
							JPushClientUtil.sendPushBy(token+"","您有一条新"+notyType.getValue(),extraData);
						};
					}.start();*/
				//}
				//if(isOnlineSend(notyTask.getSendType())){
					if(!notyTask.isOffline()){
						notyTask.setOffline(true);
					}
					//addQueueHead(notyTask);//加入用户队列队首
					return false;
				//}
			}
		}
		
		if(isConnected){
			//正常连接
			try {
							
				NotificationInner notificationInner=new NotificationInner();
				notificationInner.setUserId(userId);
				notificationInner.setDeviceId(deviceId);
				notificationInner.setCommand(command);
				notificationInner.setData(data);
				
				try{
					String urlPath=propertyUtil.getProperty("server.connect.push");
					Response<NotificationInner> bizRes=httpUtil.http(serverUrl,urlPath,notificationInner,NotificationInner.class);
					if(null!=bizRes && bizRes.getStatus().getCode()!=StatusCode.OK.getValue()){
						throw new NotificationException(bizRes.getStatus().getCode());
					}
				
					//更新状态：已发送   --可以改进：独立服务器处理消息状态
					//???异步处理
					NotyTaskRequest bizReq=new NotyTaskRequest();
					bizReq.setId(notyTask.getId());
					bizReq.setStatus(NotyTask.Status.SENT.getCode());
					Context ctx=new Context();
					ctx.set("userId", -1+"");	//系统
					NotificationTask notificationTask=DTOConvert.toNotificationTask(bizReq);
					notificationTaskService.save(ctx, notificationTask);
				}catch(BizException e){
					log.error("",e);
					throw new NotificationException(e.getCode());
				}
			} catch (NotificationException e) {
				log.error("send mq error and rollback->error notyTask:"+notyTask.getId(),e);
				//addQueueHead(notyTask,true,isOfflineQueue);
				return false;
			}
		}
		data=null;
		return true;
	}
	private boolean isOfflineSend(int sendType){
		return false;
		//return sendType==NotyMessage.SendType.OFF_LINE.getValue() || sendType==NotyMessage.SendType.ONFF_LINE.getValue();
	}
	private boolean isOnlineSend(int sendType){
		return false;
		//return sendType==NotyMessage.SendType.ON_LINE.getValue() || sendType==NotyMessage.SendType.ONFF_LINE.getValue();
	}
	/**
	 * 离线推送队列
	 * @param notyTask
	 */
	private void addQueue(NotyTask notyTask){
		redisQueue.add(queueName, JsonUtils.toJson(notyTask));
	}
	private void addQueueHead(NotyTask notyTask){
		redisQueue.addHead(queueName, JsonUtils.toJson(notyTask));
	}
	private void addQueue(NotyTask notyTask,boolean isOffline,boolean isOfflineQueue){
	
		/*
		 * if 离线 then
		 *   if 来自离线队列的处理 then
		 *      入离线队首
		 *   else 来自在线队列的处理
		 *      入离线队尾
		 *   end 
		 *  else 在线
		 *      入在线队首
		 *  end
		 */
		redisQueue.add(NotyQueue.QUEUE_USER, queueName);
		if(isOffline){
			String offlineQueueName=getOfflineQueueName(queueName);
			if(isOfflineQueue){
				redisQueue.addHead(offlineQueueName, JsonUtils.toJson(notyTask));
			}else{
				redisQueue.add(offlineQueueName, JsonUtils.toJson(notyTask));
			}
		}else{
			redisQueue.addHead(queueName, JsonUtils.toJson(notyTask));
		}
	}
	private String getOfflineQueueName(String queueName){
		return queueName+Separator.underline+NotyQueuePrefix.OFFLINE;
	}
	public static NotyTarget getTarget(String queueNameTarget){
		if(null==queueNameTarget) return null;
		String targetStr=queueNameTarget.split(Separator.escape+Separator.underline)[1]; 
		String[] targetArr=targetStr.split(Separator.escape+Separator.vertical);
		Long userId=Long.valueOf(targetArr[0]);
		Long deviceId=targetArr.length==2?Long.valueOf(targetArr[1]):null;
		
		return new NotyTarget(userId,deviceId);
	}
}
