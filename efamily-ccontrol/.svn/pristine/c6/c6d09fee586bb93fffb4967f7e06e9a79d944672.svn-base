package com.winterframework.efamily.ccontrol.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.winterframework.efamily.base.enums.Separator;
import com.winterframework.efamily.base.redis.RedisClient;
import com.winterframework.efamily.base.utils.JsonUtils;
import com.winterframework.efamily.ccontrol.exception.CcontrolException;
import com.winterframework.efamily.ccontrol.service.IServerService;
import com.winterframework.efamily.dto.common.RedisPrefix;
import com.winterframework.efamily.dto.server.ServerLoad;
import com.winterframework.efamily.entity.EfServer;

@Service("serverServiceImpl")
@Transactional(rollbackFor = Exception.class)
public class ServerServiceImpl implements IServerService {
	private static final Logger log = LoggerFactory.getLogger(ServerServiceImpl.class);
	@Resource(name = "RedisClient")
	private RedisClient redisClient;	
	
	public void connect(Long userId, Long deviceId,String serverIp) throws CcontrolException {
		/**
		 * 设置路由
		 * 设置负载
		 */
		setRoute(userId, deviceId, serverIp);
		setLoad(serverIp,true);	//可异步进行
	}
	public void disconnect(Long userId, Long deviceId, String serverIp)
			throws CcontrolException {
		delRoute(userId,deviceId);
		setLoad(serverIp, false);	//可异步进行
	}
	
	public List<ServerLoad> load() throws CcontrolException { /**
		 * 1.获取可用服务器列表
		 * 2.获取服务器对应负载
		 */
		List<EfServer> serverList=getServerList();
		return getServerLoad(serverList);
	}
	protected List<EfServer> getServerList() throws CcontrolException{
		String serverStr=redisClient.get(RedisPrefix.SERVER_LIST);
		if(null!=serverStr){
			return JsonUtils.fromJson2List(serverStr, EfServer.class);
		}
		return null;
	}
	protected List<ServerLoad> getServerLoad(List<EfServer> serverList) throws CcontrolException{
		List<ServerLoad> serverLoadList=new ArrayList<ServerLoad>();
		if(null!=serverList){
			ServerLoad serverLoad=null;
			for(EfServer svr:serverList){
				serverLoad=new ServerLoad();
				String serverIp=svr.getIp();
				int loadCount=0;
				serverLoad.setIp(serverIp);
				String strLoad=redisClient.get(RedisPrefix.SERVER_LOAD+serverIp);
				if(null==strLoad){
					serverLoad.setLoad(loadCount);
				}else{
					loadCount=Integer.valueOf(strLoad);
					serverLoad.setLoad(loadCount);
				}
				serverLoadList.add(serverLoad);
			}	
		}
		return serverLoadList;
	}
	
	
	public String route(Long userId, Long deviceId) throws CcontrolException {
		/**
		 * 找到用户对应服务器IP
		 */
		String serverIp=getServer(userId, deviceId);
		if(null==serverIp){
			log.error("route error. userId="+userId+" deviceId="+deviceId);
			//需要加监控
		}
		return serverIp;
	}
	public boolean isConnected(Long userId, Long deviceId)
			throws CcontrolException {
		return null!=getServer(userId, deviceId);
	}
	protected void setRoute(Long userId,Long deviceId,String serverIp) throws CcontrolException {
		redisClient.set(getRouteKey(userId, deviceId), serverIp);
	}
	
	/**
	 * @param userId
	 * @param deviceId
	 * @throws CcontrolException
	 */
	protected void delRoute(Long userId,Long deviceId) throws CcontrolException {
		redisClient.del(getRouteKey(userId, deviceId));
	}
	protected  synchronized void setLoad(String serverIp,boolean isAdd) throws CcontrolException {
		String loadStr=redisClient.get(RedisPrefix.SERVER_LOAD+serverIp);
		int loadCount=0;
		if(null!=loadStr){
			loadCount=Integer.valueOf(loadStr);
		}
		if(isAdd){
			loadCount++;
		}else if(loadCount>0){
			loadCount--;
		}
		redisClient.set(RedisPrefix.SERVER_LOAD+serverIp,loadCount+"");
	}
	protected String getServer(Long userId,Long deviceId) throws CcontrolException {
		return redisClient.get(getRouteKey(userId, deviceId));
	}
	private String getRouteKey(Long userId,Long deviceId){
		String deviceIdStr="";
		if(null!=deviceId){
			deviceIdStr=Separator.vertical+deviceId;
		}
		return RedisPrefix.SERVER_ROUTE+userId+deviceIdStr;
	}
}
